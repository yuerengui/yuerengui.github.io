(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{312:function(n,l){n.exports={attributes:{title:"ElasticSearch 项目实践",date:"2018-01-21T13:42:14.000Z",tags:["ElasticSearch","模糊查询"]},html:'<h1>ES 项目实践</h1>\n<blockquote>\n<p>公司的搜索用到了 ES，摸索了半个月左右，终于项目上线，也是着实不易，这里总结下项目中遇到的一些问题和一些经验总结。</p>\n</blockquote>\n<h2>需求</h2>\n<p>首先是我们项目的需求，这里大概说明一下，我司主要做的是一个国外的房产项目，会有很多房源信息，用户在搜索的时候会希望通过房源编号，门牌号码，社区，城市等方式搜索出当前符合条件的房源。</p>\n<p><more></more></p>\n<h2>实现</h2>\n<p>首先需要说明的是，如果是精确关键字搜索的话，倒也稍微不那么麻烦点，搜索的时候 match 关键字就好了，但是事实上有时候用户并不会记得精确的关键字，可能只知道某个房源是哪个社区的，甚至社区名字可能还会拼错，基于这种场景，我们就需要用到自动完成的功能。</p>\n<p>自动完成一开始我们使用的是 edgeNgram，手动设置 mapping 之后，将数据以 edgeNgram 的形式进行分词,之后搜索的时候便可以进行自动完成了，这种实现方式我们最为优先考虑的现实可行的解决办法，BTW，我们之前还考虑过使用 wildcard 进行autocomplete 搜索（其他技术人员建议），稍微在 google 上搜索了一下，发现有很多人会反馈性能问题，所以这种方式我们也就直接忽略，开始使用 edgeNgram 方式来创建索引，进行搜索。</p>\n<p><strong>edgeNgram 的实现原理</strong></p>\n<p>edgeNgram 分词的原理则是将一个或者多个单词拆成多个前缀相同但是长度不同的词组，比如 <code>Hello</code>，拆成 <code>H He Hel Hell Hello</code>，这样即便你输入 <code>Hel</code> 也能搜索到 <code>Hello</code> 相关的文档</p>\n<p>下面是这种方式的 mapping,创建好 mapping 之后就可以导入数据，进行搜索了</p>\n<pre><code class="language-bash"><span class="hljs-variable">$settingCommunityParams</span> = [\n    <span class="hljs-string">\'index\'</span> =&gt; <span class="hljs-string">\'dev_community\'</span>,\n    <span class="hljs-string">\'body\'</span> =&gt; [\n        <span class="hljs-string">\'settings\'</span> =&gt; [\n            <span class="hljs-string">\'number_of_shards\'</span> =&gt; 5,\n            <span class="hljs-string">\'number_of_replicas\'</span> =&gt; 1,\n            <span class="hljs-string">\'analysis\'</span> =&gt; [\n                <span class="hljs-string">\'analyzer\'</span> =&gt; [\n                    <span class="hljs-string">\'standardWithEdgeNGram\'</span> =&gt; [\n                        <span class="hljs-string">\'tokenizer\'</span> =&gt; <span class="hljs-string">\'standard\'</span>,\n                        <span class="hljs-string">\'filter\'</span>    =&gt; [<span class="hljs-string">\'lowercase\'</span>,<span class="hljs-string">\'edgeNGram\'</span>]\n                    ]\n                ],\n                <span class="hljs-string">\'tokenizer\'</span> =&gt; [\n                    <span class="hljs-string">\'standard\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span>  =&gt; <span class="hljs-string">\'standard\'</span>\n                    ]\n                ],\n                <span class="hljs-string">\'filter\'</span> =&gt; [\n                    <span class="hljs-string">\'lowercase\'</span> =&gt; [<span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'lowercase\'</span>],\n                    <span class="hljs-string">\'edgeNGram\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span>=&gt; <span class="hljs-string">\'edgeNGram\'</span>,\n                        <span class="hljs-string">\'min_gram\'</span>=&gt; 2,\n                        <span class="hljs-string">\'max_gram\'</span>=&gt; 15,\n                        <span class="hljs-string">\'token_chars\'</span> =&gt; [<span class="hljs-string">\'letter\'</span>,<span class="hljs-string">\'digit\'</span>]\n                    ]\n                ]\n            ]\n        ],\n        <span class="hljs-string">\'mappings\'</span> =&gt; [\n            <span class="hljs-string">\'community\'</span> =&gt; [\n                <span class="hljs-string">\'properties\'</span> =&gt; [\n                    <span class="hljs-string">\'all\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'text\'</span>,\n                        <span class="hljs-string">\'analyzer\'</span> =&gt; <span class="hljs-string">\'standardWithEdgeNGram\'</span>,\n                        <span class="hljs-string">\'search_analyzer\'</span> =&gt; <span class="hljs-string">\'standard\'</span>\n                    ],\n                    <span class="hljs-string">\'community_plus\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'keyword\'</span>,\n                        <span class="hljs-string">\'copy_to\'</span>   =&gt; <span class="hljs-string">\'all\'</span>\n                    ],\n                    <span class="hljs-string">\'municipality_plus\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'keyword\'</span>,\n                        <span class="hljs-string">\'copy_to\'</span>   =&gt; <span class="hljs-string">\'all\'</span>\n                    ]\n                ]\n            ]\n        ]\n    ]\n];\n<span class="hljs-variable">$client</span>-&gt;indices()-&gt;create(<span class="hljs-variable">$settingCommunityParams</span>);\n</code></pre>\n<p>关于 <code>edgeNgram</code> 细节方面的东西网上很多，我这里就不再赘述。不清楚的可以去 ES 官网查看官方文档。</p>\n<h2>EdgeNgram 存在问题</h2>\n<p>但是之后产品反馈，在进行搜索的过程中，经常会出现一些不准确的场景，比如我输入 <code>25 bam</code> 的时候，会出现 <code>255 bamburge</code> 这样的搜索结果，这不是我们想要的，这其实也算是 <code>edgeNgram</code>  的一种特征吧，根据 <code>25</code> 关键字也能搜索 <code>255</code> 对应的文档，但是这种并不太符合我们的需求，所以之后我们进行了各种尝试，更改 <code>edgeNgram</code>  的各种 <code>setting</code>  最后都没有找到更好的办法，然后我们开始使用其他的方式来进行自动完成。</p>\n<h2>Completion</h2>\n<p>后来就找到了 completion，在尝试了 edgeNgram 一直不行的时候，我们在网上搜索各种解决办法，发现一家同行房地产网站写了篇<a href="http://rea.tech/using-elasticsearch-completion-suggesters-for-address-autosuggest/">博客</a> 来介绍 completion，以及 completion 如何在他们项目中应用的，之后我们便开始使用 completion 进行索引设置，然后重建索引。</p>\n<p>但是 一开始也并不顺利，在尝试了几个 demo 之后，发现搜索的结果并没有和 edgeNgram 有多大的区别，还是如上面的例子一样，搜索仍然可以搜索到不精准的结果，所以我们一开始就放弃了 completion 的尝试，转而在搜索的时候尝试去使用 prefix 的方式进行搜索，最后发现 prefix 这个东西也只是仅仅能实现而已，性能方面并没有太好，而且只是单纯的去匹配前缀，如果我搜索多个词，这个 prefix 可能就不那么好使了，最后又转而回去 completion 重新试了一下，随便瞎捣鼓，更改了一下mapping 的分词器，设置为  <code>standard</code>  ,之后便可以如我们预期的那样，（也可能是其他设置之类的，这里有点不求甚解，反正最后是成功了）</p>\n<pre><code class="language-bash"><span class="hljs-variable">$settingParams</span> = [\n    <span class="hljs-string">\'index\'</span> =&gt; <span class="hljs-string">\'dev_address\'</span>,\n    <span class="hljs-string">\'body\'</span> =&gt; [\n        <span class="hljs-string">\'mappings\'</span> =&gt; [\n            <span class="hljs-string">\'address\'</span> =&gt; [\n                <span class="hljs-string">\'properties\'</span> =&gt; [\n                    <span class="hljs-string">\'all\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'completion\'</span>,\n                        <span class="hljs-string">\'analyzer\'</span> =&gt; <span class="hljs-string">\'standard\'</span>,\n                        <span class="hljs-string">\'search_analyzer\'</span> =&gt; <span class="hljs-string">\'standard\'</span>\n                    ],\n                    <span class="hljs-string">\'addr\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'keyword\'</span>\n                    ],\n                    <span class="hljs-string">\'apt_num\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'keyword\'</span>\n                    ],\n                    <span class="hljs-string">\'municipality_plus\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'keyword\'</span>\n                    ],\n                    <span class="hljs-string">\'ml_num\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'keyword\'</span>\n                    ],\n                    <span class="hljs-string">\'community_plus\'</span> =&gt; [\n                        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'keyword\'</span>\n                    ]\n                ]\n            ]\n        ]\n    ]\n];\n<span class="hljs-variable">$client</span>-&gt;indices()-&gt;create(<span class="hljs-variable">$settingParams</span>);\n</code></pre>\n<p>然后 completion 要多嘴一句，你如果想不同的关键字能够同时定位到同一个文档的话，在创建索引的时候添加关键字即可，比如</p>\n<pre><code class="language-bash"><span class="hljs-comment"># 官方实例</span>\nPUT music/song/1?refresh\n{\n    <span class="hljs-string">"suggest"</span> : [\n        {\n            <span class="hljs-string">"input"</span>: <span class="hljs-string">"Nevermind"</span>,\n            <span class="hljs-string">"weight"</span> : 10\n        },\n        {\n            <span class="hljs-string">"input"</span>: <span class="hljs-string">"Nirvana"</span>,\n            <span class="hljs-string">"weight"</span> : 3\n        }\n    ]\n}\n\n<span class="hljs-comment"># 搜索 nevermind 和 nirvana 都能定位到 song/1 这条文档，只是权重不同。</span>\n</code></pre>\n<h2>如果搜索不到文档</h2>\n<p>因为这种方式是基于精确匹配（和 prefix 的区别请自行了解，这里不做赘述，好吧，实际上是我暂时还不知道），所以有时候会有搜不到文档的时候，所以我们又多做了一步，添加 edgeNgram 分词，用户在搜索地址的时候如果没有搜索到，便使用这种方式进行二次搜索将结果返回给用户，不准确的结果总比没有结果要好看，基于这样的考虑，我们在 PHP 接口中做了逻辑判断来进行数据返回。</p>\n<h2>最后</h2>\n<p>还有一些细节方面的东西，比如 completion 搜索结果排序，edgeNgram 搜索结果自定义评分来实现自定义排序等我们做了但是没说的，后续可能再开新的篇幅把这些细节的东西说一说。</p>\n<p>另，推荐中华石杉的 ES 课程，虽然不推荐盗版，但是淘宝能买到哦..（吐槽一句，这货讲课特别啰嗦，一个小功能能拆成 N 课时去讲）</p>\n',description:"<html><head></head><body><h1>ES &#x9879;&#x76EE;&#x5B9E;&#x8DF5;</h1>\n<blockquote>\n<p>&#x516C;&#x53F8;&#x7684;&#x641C;&#x7D22;&#x7528;&#x5230;&#x4E86; ES&#xFF0C;&#x6478;&#x7D22;&#x4E86;&#x534A;&#x4E2A;&#x6708;&#x5DE6;&#x53F3;&#xFF0C;&#x7EC8;&#x4E8E;&#x9879;&#x76EE;&#x4E0A;&#x7EBF;&#xFF0C;&#x4E5F;&#x662F;&#x7740;&#x5B9E;&#x4E0D;&#x6613;&#xFF0C;&#x8FD9;&#x91CC;&#x603B;&#x7ED3;&#x4E0B;&#x9879;&#x76EE;&#x4E2D;&#x9047;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;&#x548C;&#x4E00;&#x4E9B;&#x7ECF;&#x9A8C;&#x603B;&#x7ED3;&#x3002;</p>\n</blockquote>\n<h2>&#x9700;&#x6C42;</h2>\n<p>&#x9996;&#x5148;&#x662F;&#x6211;&#x4EEC;&#x9879;&#x76EE;&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x8FD9;&#x91CC;&#x5927;&#x6982;&#x8BF4;&#x660E;&#x4E00;&#x4E0B;&#xFF0C;&#x6211;&#x53F8;&#x4E3B;&#x8981;&#x505A;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x56FD;&#x5916;&#x7684;&#x623F;&#x4EA7;&#x9879;&#x76EE;&#xFF0C;&#x4F1A;&#x6709;&#x5F88;&#x591A;&#x623F;&#x6E90;&#x4FE1;&#x606F;&#xFF0C;&#x7528;&#x6237;&#x5728;&#x641C;&#x7D22;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x5E0C;&#x671B;&#x901A;&#x8FC7;&#x623F;&#x6E90;&#x7F16;&#x53F7;&#xFF0C;&#x95E8;&#x724C;&#x53F7;&#x7801;&#xFF0C;&#x793E;&#x533A;&#xFF0C;&#x57CE;&#x5E02;&#x7B49;&#x65B9;&#x5F0F;&#x641C;&#x7D22;&#x51FA;&#x5F53;&#x524D;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x623F;&#x6E90;&#x3002;</p>\n<p><more></more></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</body></html>"}}}]);