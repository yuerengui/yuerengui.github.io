(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{313:function(n,t){n.exports={attributes:{title:"git常用命令",date:"2017-05-24T18:46:18.000Z",tags:["Git"]},html:'<h1>我的全局alias设定</h1>\n<pre><code class="language-bash">[<span class="hljs-built_in">alias</span>]\n\tst = status\n\tco = checkout\n\tcm = commit -m\n\tunstage = reset HEAD\n\tlast = <span class="hljs-built_in">log</span> -1\n\tlg = <span class="hljs-built_in">log</span> --color --graph --pretty=format:<span class="hljs-string">\'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset\'</span> --abbrev-commit\n\tbr = branch\n\tline = <span class="hljs-built_in">log</span> --oneline\n\tdt = difftool\n</code></pre>\n<p><more></more></p>\n<h1>常用命令</h1>\n<pre><code class="language-bash"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span>\n$ git init\n<span class="hljs-comment"># 新建一个目录，将其初始化为Git代码库</span>\n$ git init [project-name]\n<span class="hljs-comment"># 下载一个项目和它的整个代码历史</span>\n$ git <span class="hljs-built_in">clone</span> [url]\n<span class="hljs-comment"># 显示当前的Git配置</span>\n$ git config --list\n<span class="hljs-comment"># 编辑Git配置文件</span>\n$ git config -e [--global]\n<span class="hljs-comment"># 设置提交代码时的用户信息</span>\n$ git config [--global] user.name <span class="hljs-string">"[name]"</span>\n$ git config [--global] user.email <span class="hljs-string">"[email address]"</span>\n<span class="hljs-comment"># 添加指定文件到暂存区</span>\n$ git add [file1] [file2] ...\n<span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span>\n$ git add [dir]\n<span class="hljs-comment"># 添加当前目录的所有文件到暂存区</span>\n$ git add .\n<span class="hljs-comment"># 对于同一个文件的多处变化，可以实现分次提交</span>\n$ git add -p\n<span class="hljs-comment"># 删除工作区文件，并且将这次删除放入暂存区</span>\n$ git rm [file1] [file2] ...\n<span class="hljs-comment"># 停止追踪指定文件，但该文件会保留在工作区</span>\n$ git rm --cached [file]\n<span class="hljs-comment"># 改名文件，并且将这个改名放入暂存区</span>\n$ git mv [file-original] [file-renamed]\n<span class="hljs-comment"># 提交暂存区到仓库区</span>\n$ git commit -m [message]\n<span class="hljs-comment"># 提交暂存区的指定文件到仓库区</span>\n$ git commit [file1] [file2] ... -m [message]\n<span class="hljs-comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span>\n$ git commit -a\n<span class="hljs-comment"># 提交时显示所有diff信息</span>\n$ git commit -v\n<span class="hljs-comment"># 使用一次新的commit，替代上一次提交</span>\n<span class="hljs-comment">#如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>\n$ git commit --amend -m [message]\n<span class="hljs-comment"># 重做上一次commit，并包括指定文件的新变化</span>\n$ git commit --amend [file1] [file2] ...\n<span class="hljs-comment"># 列出所有本地分支</span>\n$ git branch\n<span class="hljs-comment"># 列出所有远程分支</span>\n$ git branch -r\n<span class="hljs-comment"># 列出所有本地分支和远程分支</span>\n$ git branch -a\n<span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span>\n$ git branch [branch-name]\n<span class="hljs-comment"># 新建一个分支，并切换到该分支</span>\n$ git checkout -b [branch]\n<span class="hljs-comment"># 新建一个分支，指向指定commit</span>\n$ git branch [branch] [commit]\n<span class="hljs-comment"># 新建一个分支，与指定的远程分支建立追踪关系</span>\n$ git branch --track [branch] [remote-branch]\n<span class="hljs-comment"># 切换到指定分支，并更新工作区</span>\n$ git checkout [branch-name]\n<span class="hljs-comment"># 切换到上一个分支</span>\n$ git checkout -\n<span class="hljs-comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span>\n$ git branch --<span class="hljs-built_in">set</span>-upstream [branch] [remote-branch]\n<span class="hljs-comment"># 合并指定分支到当前分支</span>\n$ git merge [branch]\n<span class="hljs-comment"># 选择一个commit，合并进当前分支</span>\n$ git cherry-pick [commit]\n<span class="hljs-comment"># 删除分支</span>\n$ git branch -d [branch-name]\n<span class="hljs-comment"># 删除远程分支</span>\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n<span class="hljs-comment"># 列出所有tag</span>\n$ git tag\n<span class="hljs-comment"># 新建一个tag在当前commit</span>\n$ git tag [tag]\n<span class="hljs-comment"># 新建一个tag在指定commit</span>\n$ git tag [tag] [commit]\n<span class="hljs-comment"># 删除本地tag</span>\n$ git tag -d [tag]\n<span class="hljs-comment"># 删除远程tag</span>\n$ git push origin :refs/tags/[tagName]\n<span class="hljs-comment"># 查看tag信息</span>\n$ git show [tag]\n<span class="hljs-comment"># 提交指定tag</span>\n$ git push [remote] [tag]\n<span class="hljs-comment"># 提交所有tag</span>\n$ git push [remote] --tags\n<span class="hljs-comment"># 新建一个分支，指向某个tag</span>\n$ git checkout -b [branch] [tag]\n<span class="hljs-comment"># 显示有变更的文件</span>\n$ git status\n<span class="hljs-comment"># 显示当前分支的版本历史</span>\n$ git <span class="hljs-built_in">log</span>\n<span class="hljs-comment"># 显示commit历史，以及每次commit发生变更的文件</span>\n$ git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span>\n<span class="hljs-comment"># 搜索提交历史，根据关键词</span>\n$ git <span class="hljs-built_in">log</span> -S [keyword]\n<span class="hljs-comment"># 显示某个commit之后的所有变动，每个commit占据一行</span>\n$ git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s\n<span class="hljs-comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span>\n$ git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature\n<span class="hljs-comment"># 显示某个文件的版本历史，包括文件改名</span>\n$ git <span class="hljs-built_in">log</span> --follow [file]\n$ git whatchanged [file]\n<span class="hljs-comment"># 显示指定文件相关的每一次diff</span>\n$ git <span class="hljs-built_in">log</span> -p [file]\n<span class="hljs-comment"># 显示过去5次提交</span>\n$ git <span class="hljs-built_in">log</span> -5 --pretty --oneline\n<span class="hljs-comment"># 显示所有提交过的用户，按提交次数排序</span>\n$ git shortlog -sn\n<span class="hljs-comment"># 显示指定文件是什么人在什么时间修改过</span>\n$ git blame [file]\n<span class="hljs-comment"># 显示暂存区和工作区的差异</span>\n$ git diff\n<span class="hljs-comment"># 显示暂存区和上一个commit的差异</span>\n$ git diff --cached [file]\n<span class="hljs-comment"># 显示工作区与当前分支最新commit之间的差异</span>\n$ git diff HEAD\n<span class="hljs-comment"># 显示两次提交之间的差异</span>\n$ git diff [first-branch]...[second-branch]\n<span class="hljs-comment"># 显示今天你写了多少行代码</span>\n$ git diff --shortstat <span class="hljs-string">"@{0 day ago}"</span>\n<span class="hljs-comment"># 显示某次提交的元数据和内容变化</span>\n$ git show [commit]\n<span class="hljs-comment"># 显示某次提交发生变化的文件</span>\n$ git show --name-only [commit]\n<span class="hljs-comment"># 显示某次提交时，某个文件的内容</span>\n$ git show [commit]:[filename]\n<span class="hljs-comment"># 显示当前分支的最近几次提交</span>\n$ git reflog\n<span class="hljs-comment"># 下载远程仓库的所有变动</span>\n$ git fetch [remote]\n<span class="hljs-comment"># 显示所有远程仓库</span>\n$ git remote -v\n<span class="hljs-comment"># 显示某个远程仓库的信息</span>\n$ git remote show [remote]\n<span class="hljs-comment"># 增加一个新的远程仓库，并命名</span>\n$ git remote add [shortname] [url]\n<span class="hljs-comment"># 取回远程仓库的变化，并与本地分支合并</span>\n$ git pull [remote] [branch]\n<span class="hljs-comment"># 上传本地指定分支到远程仓库</span>\n$ git push [remote] [branch]\n<span class="hljs-comment"># 强行推送当前分支到远程仓库，即使有冲突</span>\n$ git push [remote] --force\n<span class="hljs-comment"># 推送所有分支到远程仓库</span>\n$ git push [remote] --all\n<span class="hljs-comment"># 恢复暂存区的指定文件到工作区</span>\n$ git checkout [file]\n<span class="hljs-comment"># 恢复某个commit的指定文件到暂存区和工作区</span>\n$ git checkout [commit] [file]\n<span class="hljs-comment"># 恢复暂存区的所有文件到工作区</span>\n$ git checkout .\n<span class="hljs-comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>\n$ git reset [file]\n<span class="hljs-comment"># 重置暂存区与工作区，与上一次commit保持一致</span>\n$ git reset --hard\n<span class="hljs-comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>\n$ git reset [commit]\n<span class="hljs-comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>\n$ git reset --hard [commit]\n<span class="hljs-comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>\n$ git reset --keep [commit]\n<span class="hljs-comment"># 新建一个commit，用来撤销指定commit</span>\n<span class="hljs-comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>\n$ git revert [commit]\n<span class="hljs-comment"># 暂时将未提交的变化移除，稍后再移入</span>\n$ git stash\n$ git stash pop\n<span class="hljs-comment"># 生成一个可供发布的压缩包</span>\n$ git archive\n</code></pre>\n<blockquote>\n<p>参考:<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>\n</blockquote>\n',description:'<html><head></head><body><h1>&#x6211;&#x7684;&#x5168;&#x5C40;alias&#x8BBE;&#x5B9A;</h1>\n<pre><code class="language-bash">[<span class="hljs-built_in">alias</span>]\n\tst = status\n\tco = checkout\n\tcm = commit -m\n\tunstage = reset HEAD\n\tlast = <span class="hljs-built_in">log</span> -1\n\tlg = <span class="hljs-built_in">log</span> --color --graph --pretty=format:<span class="hljs-string">&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos;</span> --abbrev-commit\n\tbr = branch\n\tline = <span class="hljs-built_in">log</span> --oneline\n\tdt = difftool\n</code></pre>\n<p><more></more></p>\n\n\n\n</body></html>'}}}]);