(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{317:function(n,l){n.exports={attributes:{title:"Laravel零碎知识学习",date:"2017-05-24T18:51:47.000Z",tags:["Laravel"]},html:'<blockquote>\n<p>起因是因为工作的项目里面用到的laravel相关的知识极为零碎,一直这么下去好像一直在原地踏步一样，索性花一点时间自己捣鼓一下，把laravel的整体知识大概梳理一遍，把一些重要的东西记录下来，好让自己以后不管在工作中还是自己的项目里需要laravel高级功能的时候，不至于手足无措。</p>\n</blockquote>\n<h1>Laravel常规</h1>\n<h2>显示视图</h2>\n<pre><code class="language-php"><span class="hljs-comment">//控制器方法</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xxx</span><span class="hljs-params">()</span>\n</span>{\n    $view = View(<span class="hljs-string">\'folder.bladename\'</span>);\n    <span class="hljs-keyword">return</span> $view;\n}\n</code></pre>\n<p><more></more></p>\n<h2>传递变量给视图</h2>\n<pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xxx</span><span class="hljs-params">()</span>\n</span>{\n    $view = View(<span class="hljs-string">\'folder.bladename\'</span>);\n    <span class="hljs-comment"># 第一种</span>\n    <span class="hljs-keyword">return</span> $view-&gt;with(<span class="hljs-string">\'name\'</span>,$name);\n    <span class="hljs-comment"># 第二种</span>\n    <span class="hljs-keyword">return</span> $view-&gt;with([\n        <span class="hljs-string">\'name1\'</span> =&gt; <span class="hljs-string">\'value1\'</span>,\n        <span class="hljs-string">\'name2\'</span> =&gt; <span class="hljs-string">\'value2\'</span>\n    ])\n    <span class="hljs-comment"># 第三种</span>\n    $data = <span class="hljs-keyword">array</span>(\n        <span class="hljs-string">\'name1\'</span> =&gt; <span class="hljs-string">\'value1\'</span>,\n        <span class="hljs-string">\'name2\'</span> =&gt; <span class="hljs-string">\'value2\'</span>\n    );\n    <span class="hljs-keyword">return</span> View(<span class="hljs-string">\'folder.bladename\'</span>,$data);\n    <span class="hljs-comment"># 第四种</span>\n    $name1 = <span class="hljs-string">\'value1\'</span>;\n    $name2 = <span class="hljs-string">\'value2\'</span>;\n    <span class="hljs-keyword">return</span> View(<span class="hljs-string">\'folder.bladename\'</span>,compact(<span class="hljs-string">\'name1\'</span>,<span class="hljs-string">\'name2\'</span>))\n}\n<span class="hljs-comment"># 第五种，直接在模板中使用@inject声明类，通过类的方法调用数据</span>\n<span class="hljs-comment">// xxx.blade.php</span>\n@inject(<span class="hljs-string">\'variable\'</span>,<span class="hljs-string">\'App\\Variables\'</span>);\n{{$variable-&gt;getNumber()}}\n</code></pre>\n<h2>模板的部分代码共用</h2>\n<pre><code class="language-js">@extend(<span class="hljs-string">\'master\'</span>) <span class="hljs-comment">//引入view文件夹下的master.blade.php到某个视图中</span>\n@<span class="hljs-keyword">yield</span>(<span class="hljs-string">\'js-block\'</span>);  <span class="hljs-comment">//对某个模块进行占位，使用@section方法来写入具体内容</span>\n@section(<span class="hljs-string">\'js-block\'</span>)\n<span class="hljs-comment">//details</span>\n@stop\n@include(<span class="hljs-string">\'errors.list\'</span>) <span class="hljs-comment">//引入view文件夹下的某些共用元素</span>\n</code></pre>\n<h2>在视图中显示变量值</h2>\n<pre><code class="language-js"><span class="hljs-comment">// xx.blade.php</span>\n<span class="hljs-comment">// {{$xxx}} 转义变量中的特殊字符为文本</span>\n<span class="hljs-comment">// {!!$xx!!} 将变量中的特殊字符原样输出到网页</span>\n&lt;input type=<span class="hljs-string">"text"</span> value=<span class="hljs-string">"{{$name}}"</span> /&gt;\n</code></pre>\n<h2>配置路由</h2>\n<pre><code class="language-php"><span class="hljs-comment">//配置路由某一项，url访问:domain/checkmail</span>\nRoute::get(<span class="hljs-string">\'/checkmail\'</span>, <span class="hljs-string">\'CompanyController@checkmail\'</span>);\n<span class="hljs-comment">//配置控制器下所有路由</span>\nRoute::resource(<span class="hljs-string">\'articles\'</span>,<span class="hljs-string">\'ArticlesController\'</span>);\n</code></pre>\n<h2>artisan命令</h2>\n<pre><code class="language-bash"><span class="hljs-comment"># 创建控制器 默认会在控制器中生成一堆常用方法</span>\nphp artisan make:controller SiteController\n<span class="hljs-comment"># 创建控制器 不生成任何默认方法</span>\nphp artisan make:controller SiteController --plain\n<span class="hljs-comment"># 创建model</span>\nphp artisan make:model Article\n<span class="hljs-comment"># 创建单独的表单验证文件</span>\nphp artisan make:request createArticleRequest\n<span class="hljs-comment"># 查看生效的路由列表</span>\nphp artisan route:list\n<span class="hljs-comment"># 创建中间件</span>\nphp artisan make:middleware auth\n</code></pre>\n<h2>Laravel Migration</h2>\n<pre><code class="language-bash">php artisan migrate <span class="hljs-comment"># 创建迁移数据库表</span>\nphp artisan migrate:rollback <span class="hljs-comment"># 回滚最最近一次运行的迁移任务</span>\nphp artisan make:migration create_article_table --create=articles <span class="hljs-comment"># 创建一个新的迁移文件</span>\nphp artisan make:migration add_id_column_to_article --table=articles <span class="hljs-comment"># 创建一个新的迁移文件,针对已经存在的数据表做出修改</span>\n</code></pre>\n<h2>表单验证</h2>\n<p>1.使用单独的验证文件</p>\n<pre><code class="language-php"><span class="hljs-comment">//xxxController.php</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Requests\\CreateArticleRequest $request)</span></span>{\n    <span class="hljs-comment">//continue;</span>\n}\n<span class="hljs-comment">//xxxRequest.php</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rules</span><span class="hljs-params">()</span></span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'title\'</span>=&gt;<span class="hljs-string">\'required|min:3\'</span>\n    ];\n}\n</code></pre>\n<p>2.在post方法中验证</p>\n<pre><code class="language-php"><span class="hljs-comment">//xxxController.php</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></span>{\n    <span class="hljs-keyword">$this</span>-&gt;validate($request,[<span class="hljs-string">\'title\'</span> =&gt; <span class="hljs-string">\'required\'</span>])\n}\n</code></pre>\n<h2>setAttribute和queryScope用法</h2>\n<pre><code class="language-php"><span class="hljs-comment">//模型 xxx.php</span>\n<span class="hljs-comment">//给模型添加固定方法来处理某些特地的字段</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setSexAttribute</span><span class="hljs-params">($sex)</span></span>{\n    <span class="hljs-keyword">$this</span>-&gt;attribute[<span class="hljs-string">\'sex\'</span>] = <span class="hljs-number">1</span>;\n}\n\n</code></pre>\n<pre><code class="language-php"><span class="hljs-comment">//模型 xxx.php</span>\n<span class="hljs-comment">//给模型查询的时候添加链式操作</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scopePublished</span><span class="hljs-params">($query)</span></span>{\n    $query-&gt;where(<span class="hljs-string">\'published_at\'</span>,<span class="hljs-string">\'&lt;=\'</span>,time());\n}\n\n<span class="hljs-comment">//TODO Carbon的使用</span>\n\n</code></pre>\n<h2>取出外键关联的所有数据</h2>\n<p>一般做法当然是用<code>model</code>添加查询条件找到某个外键对应的数据，不过还有另外一种做法</p>\n<pre><code class="language-php"><span class="hljs-comment">//比如你要查询某个用户对应的所有文章，文章中用户的外键是\'user_id\'</span>\n<span class="hljs-comment">//用户模型 User.php</span>\n\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">articles</span><span class="hljs-params">()</span></span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;hasMany(<span class="hljs-string">\'App\\Article\'</span>,<span class="hljs-string">\'user_id\'</span>);\n}\n\n<span class="hljs-comment">//调用</span>\n$user = User::where(<span class="hljs-string">\'id\'</span>,<span class="hljs-number">1</span>)-&gt;first();\n$user-&gt;articles();\n</code></pre>\n<h2>注册并使用中间件</h2>\n<pre><code class="language-php"><span class="hljs-comment">//创建中间件</span>\nphp artisan make:middleware isadmin\n<span class="hljs-comment">//在中间件的handle方法中进行逻辑判断</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span>\n</span>{\n    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">true</span>){\n        <span class="hljs-keyword">return</span> $next($request);\n    }\n    <span class="hljs-keyword">return</span> Redirect(<span class="hljs-string">\'/\'</span>);\n}\n<span class="hljs-comment">//将中间件注册到kernel.php的中间件数组中</span>\n<span class="hljs-keyword">protected</span> $routeMiddleware = [\n    <span class="hljs-string">\'auth\'</span> =&gt; \\App\\Http\\Middleware\\Authenticate::class,\n    <span class="hljs-string">\'auth.basic\'</span> =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n    <span class="hljs-string">\'can\'</span> =&gt; \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,\n    <span class="hljs-string">\'guest\'</span> =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n    <span class="hljs-string">\'throttle\'</span> =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    <span class="hljs-string">\'test\'</span> =&gt; \\App\\Http\\Middleware\\TestMiddleware::class,\n    <span class="hljs-string">\'isadmin\'</span> =&gt; \\App\\Http\\Middleware\\isadmin::class\n];\n<span class="hljs-comment">//在路由中使用中间件,当访问domain/admin/test url时，便会先去中间件逻辑判断，判断通过则会走路由组下面的路由</span>\nRoute::group([<span class="hljs-string">\'prefix\'</span>=&gt;<span class="hljs-string">\'admin\'</span>,<span class="hljs-string">\'middleware\'</span>=&gt;<span class="hljs-string">\'isadmin\'</span>],<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{\n    Route::get(<span class="hljs-string">\'/test\'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'yes\'</span>\n    })\n})\n</code></pre>\n<h2>分页</h2>\n<pre><code class="language-php"><span class="hljs-comment">//xxController.php</span>\n$list = xxModel::where(<span class="hljs-string">\'type\'</span>,<span class="hljs-number">1</span>)-&gt;pagination(<span class="hljs-number">15</span>);\n$view-&gt;with(<span class="hljs-string">\'list\'</span>,$list);\n\n<span class="hljs-comment">//xx.blade.php</span>\n{{ $list-&gt;appends([<span class="hljs-string">\'param2\'</span>=&gt;<span class="hljs-string">\'value2\'</span>])-&gt;render() }}\n</code></pre>\n<h2>validation自定义验证的错误信息返回</h2>\n<p>有某些非必填项的验证需要单独处理，但是我们也想让它和<code>Validator</code>的错误抛出方式一致，下面是实现方式</p>\n<pre><code class="language-php"><span class="hljs-comment">//控制器</span>\nxxxController.php\n$message = <span class="hljs-keyword">array</span>(<span class="hljs-string">\'input_name\'</span>=&gt;<span class="hljs-string">\'错误提示信息\'</span>);\n<span class="hljs-keyword">return</span> redirect()-&gt;back()-&gt;withInput()-&gt;withErrors($message);\n\n<span class="hljs-comment">//视图</span>\nviews.blade.php\n{{ $errors-&gt;first(<span class="hljs-string">\'input_name\'</span>, <span class="hljs-string">\':message\'</span>) }}\n</code></pre>\n<h1>Laravel高级</h1>\n<h2>Ioc容器介绍</h2>\n<pre><code class="language-php"><span class="hljs-comment">//TODO</span>\n</code></pre>\n<h1>PHP常规</h1>\n<h2>匿名函数和闭包</h2>\n<p>php中的匿名函数和闭包其实都是Closure的一个实例，而且在php中匿名函数和闭包是同一种东西。</p>\n<pre><code class="language-php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span><span class="hljs-params">($method)</span></span>{\n    <span class="hljs-keyword">return</span> $method <span class="hljs-keyword">instanceof</span> Closure;\n}\na(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;\n})\n\n<span class="hljs-comment">//结果为a函数返回true</span>\n</code></pre>\n<h2>call_user_function_array使用</h2>\n<pre><code class="language-php"><span class="hljs-comment">//调用回调函数（可以是匿名函数）,并将第二个数组参数作为回调函数的参数传入</span>\ncall_user_func_array(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($arg1,$arg2)</span></span>{\n    dd($arg1+$arg2);\n},[<span class="hljs-number">1</span>,<span class="hljs-number">100</span>]);\n\n<span class="hljs-comment">//例子</span>\n$concrete = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($name)</span></span>{\n\t\t\t<span class="hljs-keyword">echo</span> $name;\n\t};\n$shared = <span class="hljs-number">1</span>;\n$func = compact(<span class="hljs-string">\'concrete\'</span>);\ncall_user_func_array($func[<span class="hljs-string">\'concrete\'</span>],[<span class="hljs-string">\'lisi\'</span>]);\n</code></pre>\n<h2>诸如 ::class 的使用</h2>\n<p>laravel 引入中间件配置的时候会在文件名后面加上::class 获取文件的类名,如果该类无命名空间,则获取的就是 class 的名称字符串,如果有命名空间,则会返回包含命名空间的完全限定名称,所以,明显可以知道,这对导入有命名空间的类有很大的便利。诸如</p>\n<pre><code class="language-php">//无命名空间\nclass person{}\necho person::class\n\'person\'\n\n//有命名空间\nnamespace app\nclass person{}\n‘app\\person\'\n</code></pre>\n<h2>laravel5.2 自定义分页</h2>\n<pre><code class="language-bash">php artisan vendor:publish --tag=laravel-pagination \n<span class="hljs-comment"># 这一步是将 vendor 文件夹下的视图移动到 view 下面</span>\n{!! <span class="hljs-variable">$foo</span>-&gt;links(<span class="hljs-string">\'vendor.pagination.default\'</span>); !!}\n<span class="hljs-comment"># 引入 view 下面的分页视图模板</span>\n<span class="hljs-comment"># 然后如果想修改视图的 html 结构在 view/vendor/pagination/default.balde.php 中修改即可</span>\n</code></pre>\n',description:'<html><head></head><body><blockquote>\n<p>&#x8D77;&#x56E0;&#x662F;&#x56E0;&#x4E3A;&#x5DE5;&#x4F5C;&#x7684;&#x9879;&#x76EE;&#x91CC;&#x9762;&#x7528;&#x5230;&#x7684;laravel&#x76F8;&#x5173;&#x7684;&#x77E5;&#x8BC6;&#x6781;&#x4E3A;&#x96F6;&#x788E;,&#x4E00;&#x76F4;&#x8FD9;&#x4E48;&#x4E0B;&#x53BB;&#x597D;&#x50CF;&#x4E00;&#x76F4;&#x5728;&#x539F;&#x5730;&#x8E0F;&#x6B65;&#x4E00;&#x6837;&#xFF0C;&#x7D22;&#x6027;&#x82B1;&#x4E00;&#x70B9;&#x65F6;&#x95F4;&#x81EA;&#x5DF1;&#x6363;&#x9F13;&#x4E00;&#x4E0B;&#xFF0C;&#x628A;laravel&#x7684;&#x6574;&#x4F53;&#x77E5;&#x8BC6;&#x5927;&#x6982;&#x68B3;&#x7406;&#x4E00;&#x904D;&#xFF0C;&#x628A;&#x4E00;&#x4E9B;&#x91CD;&#x8981;&#x7684;&#x4E1C;&#x897F;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;&#xFF0C;&#x597D;&#x8BA9;&#x81EA;&#x5DF1;&#x4EE5;&#x540E;&#x4E0D;&#x7BA1;&#x5728;&#x5DE5;&#x4F5C;&#x4E2D;&#x8FD8;&#x662F;&#x81EA;&#x5DF1;&#x7684;&#x9879;&#x76EE;&#x91CC;&#x9700;&#x8981;laravel&#x9AD8;&#x7EA7;&#x529F;&#x80FD;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E0D;&#x81F3;&#x4E8E;&#x624B;&#x8DB3;&#x65E0;&#x63AA;&#x3002;</p>\n</blockquote>\n<h1>Laravel&#x5E38;&#x89C4;</h1>\n<h2>&#x663E;&#x793A;&#x89C6;&#x56FE;</h2>\n<pre><code class="language-php"><span class="hljs-comment">//&#x63A7;&#x5236;&#x5668;&#x65B9;&#x6CD5;</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xxx</span><span class="hljs-params">()</span>\n</span>{\n    $view = View(<span class="hljs-string">&apos;folder.bladename&apos;</span>);\n    <span class="hljs-keyword">return</span> $view;\n}\n</code></pre>\n<p><more></more></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</body></html>'}}}]);