(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{314:function(n,l){n.exports={attributes:{title:"Google Maps 开发入门",date:"2018-06-10T04:49:12.000Z",tags:["Map","Google"]},html:'<h1>google maps 快速入门</h1>\n<blockquote>\n<p>公司做的是地产信息查询，接入 google maps 是用来在地图页中显示所有地图点上对应的房源，让用户方便通过地图查看房源信息。在地图里大概会使用到地图库以及地图 maker ,地图 markercluster 等功能.. 有些功能比较头疼，所以就稍微罗列一下，做个记录。</p>\n</blockquote>\n<p><more></more></p>\n<h2>快速接入地图</h2>\n<p>在开发 vue 项目时，我们一开始使用的是 <code>vue2-google-maps</code> 这个plugin 来接入的 google maps，但是后来发现这个插件长久未更新，插件内引入的 google map script 会被强制升级成 v3 版本的，这样会导致各种<a href="https://www.mail-archive.com/search?l=google-maps-js-api-v3@googlegroups.com&amp;q=subject:%22%5C%5BGoogle+Maps+API+v3%5C%5D%22&amp;o=newest&amp;f=1">奇怪的不兼容bug</a>，所以就把插件移除掉，直接 script 引入 google map v3 js 使用。<br>\n不过最近 google maps api 突然涨价，这让我们小公司比较头疼，所以现在又开始重构地图然后把地图库修改成功能差不多的 leaflet，不过这是后话，下次有时间再说下 leaflet 的使用吧..</p>\n<p>以上是背景，下面就直接介绍下google maps 的接入使用吧。</p>\n<p><strong>注：以下代码是在 vue 项目中实际使用的代码</strong></p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"map"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">\'selectedHouses\'</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">\'(selectedHouse, index)  in selectedHouses\'</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">\'index\'</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{selectedHouse.title}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{selectedHouse.name}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">\'selectedHouse.img_url\'</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<h3>初始化地图，并添加必要的地图处理回调函数</h3>\n<pre><code class="language-javascript"><span class="hljs-comment">// 初始化地图插件</span>\n<span class="hljs-comment">// 地图初始化</span>\n<span class="hljs-keyword">this</span>.map = <span class="hljs-keyword">new</span> google.maps.Map(<span class="hljs-keyword">this</span>.$refs.map, {\n    <span class="hljs-attr">clickableIcons</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">uiZoomControls</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-attr">fullscreenControl</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">streetViewControl</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">gestureHandling</span>: <span class="hljs-string">\'greedy\'</span>,\n    <span class="hljs-attr">maxZoom</span>: <span class="hljs-number">18</span>,\n    <span class="hljs-attr">minZoom</span>: <span class="hljs-number">8</span>,\n    <span class="hljs-attr">zoom</span>: zoom, \n    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> google.maps.LatLng({\n        <span class="hljs-attr">lat</span>: <span class="hljs-number">43.6532</span>,\n        <span class="hljs-attr">lng</span>: <span class="hljs-number">-79.3832</span>\n      })\n})\n<span class="hljs-comment">// 侦听地图的事件</span>\n<span class="hljs-comment">// idle 会在每一次对地图进行 zoomin zoomout drag, 地图初始化的时候进行触发，如果想要在地图初始化的时候加载数据点生成 marker，在这个回调中使用最为合适</span>\n<span class="hljs-keyword">this</span>.map.addListener(<span class="hljs-string">\'idle\'</span>, () =&gt; {\n  <span class="hljs-keyword">this</span>.idleFiredCallback()\n})\n<span class="hljs-comment">// drag 只有在地图拖拽的时候才会触发</span>\n<span class="hljs-keyword">this</span>.map.addListener(<span class="hljs-string">\'drag\'</span>, () =&gt; {\n    <span class="hljs-keyword">this</span>.dragCallback()\n})\n<span class="hljs-comment">// zoom change 只有在地图zoomIn 或者 zoomOut 的时候才会触发</span>\n<span class="hljs-keyword">this</span>.map.addListener(<span class="hljs-string">\'zoom_changed\'</span>, () =&gt; {\n    <span class="hljs-keyword">this</span>.zoomChangedCallback()\n})\n<span class="hljs-comment">// 参考：google maps events 触发顺序</span>\n<span class="hljs-comment">// https://developers.google.com/maps/documentation/javascript/events</span>\n</code></pre>\n<p>在地图初始化的时候绘制 marker, 只要地图的 bounds （地图容器的四个角）有任何变化，就触发数据请求，重新更新当前地图位置的所有 marker</p>\n<pre><code class="language-javascript">idleFiredCallback () {\n  <span class="hljs-keyword">let</span> zoom = <span class="hljs-keyword">this</span>.map.getZoom()\n  <span class="hljs-keyword">let</span> ne = <span class="hljs-keyword">this</span>.map.getBounds().getNorthEast()\n  <span class="hljs-keyword">let</span> sw = <span class="hljs-keyword">this</span>.map.getBounds().getSouthWest()\n  <span class="hljs-keyword">let</span> extraHeight, extraWidth\n  <span class="hljs-keyword">if</span> (zoom &gt;= <span class="hljs-number">17</span>) {\n    extraHeight = (ne.lat() - sw.lat())\n    extraWidth = (ne.lng() - sw.lng())\n  }\n  <span class="hljs-keyword">if</span> (zoom &gt;= <span class="hljs-number">16</span>) {\n    extraHeight = (ne.lat() - sw.lat()) / <span class="hljs-number">2</span>\n    extraWidth = (ne.lng() - sw.lng()) / <span class="hljs-number">2</span>\n  } <span class="hljs-keyword">else</span> {\n    extraHeight = <span class="hljs-number">0</span>\n    extraWidth = <span class="hljs-number">0</span>\n  }\n  <span class="hljs-keyword">let</span> bounds = {\n    <span class="hljs-attr">lat1</span>: ne.lat() + extraHeight,\n    <span class="hljs-attr">lon1</span>: ne.lng() + extraWidth,\n    <span class="hljs-attr">lat2</span>: sw.lat() - extraHeight,\n    <span class="hljs-attr">lon2</span>: sw.lng() - extraWidth\n  }\n  <span class="hljs-comment">// api 请求的代码就稍微用个 searchApi 方法意思一下，你们知道这是后端请求就可以了。</span>\n  <span class="hljs-keyword">let</span> markerCollect = []\n  <span class="hljs-keyword">this</span>.searchAPI({<span class="hljs-attr">data</span>: {<span class="hljs-attr">bounds</span>: <span class="hljs-keyword">this</span>.bounds}}).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> marker <span class="hljs-keyword">in</span> response.data.markers) {\n        <span class="hljs-comment">// 循环创建 marker</span>\n        markerCollect.push(<span class="hljs-keyword">this</span>.createMarker(marker))\n    }\n  })\n},\ncreateMarker(markers) {\n    <span class="hljs-comment">// 初始化 marker object</span>\n    <span class="hljs-comment">// 注：如果想让 marker 直接显示在地图上，config 中指定 mapObject {..., map: this.map}</span>\n    <span class="hljs-comment">// 如果需要让markercluster 决定是显示 marker 还是在聚合点中聚合，则不需要这个属性，将 marker 返回交给 markercluster 集中处理</span>\n    <span class="hljs-keyword">let</span> marker = <span class="hljs-keyword">new</span> google.maps.Marker({\n      <span class="hljs-attr">position</span>: {\n        <span class="hljs-attr">lat</span>: item.lat,\n        <span class="hljs-attr">lng</span>: item.lng\n      },\n      <span class="hljs-attr">label</span>: {\n        <span class="hljs-attr">color</span>: <span class="hljs-string">\'#fff\'</span>,\n        <span class="hljs-attr">fontSize</span>: <span class="hljs-string">\'10px\'</span>,\n        <span class="hljs-attr">text</span>: item.price\n      },\n      <span class="hljs-attr">icon</span>: <span class="hljs-string">\'img/marker_40.png\'</span>,\n      <span class="hljs-attr">color</span>: <span class="hljs-string">\'#fff\'</span>,\n      <span class="hljs-attr">data</span>: item\n    })\n    marker.addListener(<span class="hljs-string">\'click\'</span>, () =&gt; {\n        <span class="hljs-comment">// 当前marker选中状态，选中 marker 的时候弹出一个弹出层预览房源详细信息</span>\n        <span class="hljs-comment">// 设置当前选中时的 active icon </span>\n        marker.setIcon(<span class="hljs-keyword">this</span>.markerStyle.activeIcon)\n        <span class="hljs-keyword">this</span>.previewApi({<span class="hljs-attr">data</span>: marker.data}).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {\n            <span class="hljs-comment">// 选中房源后向后台请求对应的详细信息，渲染到前台</span>\n            <span class="hljs-keyword">this</span>.selectedHouses = [response.data.house]\n        })\n    })\n    <span class="hljs-keyword">return</span> marker\n}\n</code></pre>\n<h3>聚合点markercluster 的使用,并添加必要的回调函数</h3>\n<p>初始化 markercluster，需要 google maps 实例化完成之后进行调用</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// MarkerClusterer(map:google.maps.Map, opt_markers?:Array.&lt;google.maps.Marker&gt;, opt_options?:MarkerClustererOptions)</span>\n<span class="hljs-keyword">this</span>.markerClusterer = <span class="hljs-keyword">new</span> MarkerClusterer(<span class="hljs-keyword">this</span>.map, <span class="hljs-literal">null</span>, {\n    <span class="hljs-attr">zoomOnClick</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">gridSize</span>: <span class="hljs-number">48</span>,\n    <span class="hljs-attr">averageCenter</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-attr">styles</span>: [<span class="hljs-keyword">this</span>.markerClustererStyles]\n})\n<span class="hljs-comment">// 点击集合点时的回调函数</span>\ngoogle.maps.event.addListener(<span class="hljs-keyword">this</span>.markerClusterer, <span class="hljs-string">\'click\'</span>, (cluster) =&gt; {\n    <span class="hljs-keyword">this</span>.clickClusterCallback(cluster)\n})\n</code></pre>\n<p>markercluster 聚合点需要在 createMarker 完成之后将所有创建的 marker 通过 cluster 的 API 进行处理，然后在前端显示</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// 上面的 idleFiredCallback, 添加 markercluster 的处理逻辑</span>\nidleFiredCallback () {\n    ...\n    let markerCollect = []\n    <span class="hljs-keyword">this</span>.searchAPI({<span class="hljs-attr">data</span>: {<span class="hljs-attr">bounds</span>: <span class="hljs-keyword">this</span>.bounds}}).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {\n        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> marker <span class="hljs-keyword">in</span> response.data.markers) {\n            <span class="hljs-comment">// 循环创建 marker</span>\n            markerCollect.push(<span class="hljs-keyword">this</span>.createMarker(marker))\n        }\n        <span class="hljs-comment">// marker 创建完毕，通过 cluster api 把 marker 全部绑定到 map，并添加显示逻辑</span>\n        <span class="hljs-keyword">if</span> (markerCollect.length) {\n            <span class="hljs-keyword">this</span>.markerClusterer.addMarkers(markerCollect)\n        } <span class="hljs-keyword">else</span> {\n            <span class="hljs-comment">// 如果没有 marker,那就清空当前地图页的 markers</span>\n            <span class="hljs-keyword">if</span> (markerCoolect === <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">this</span>.markerClusterer) {\n              <span class="hljs-keyword">this</span>.markerClusterer.clearMarkers()\n            }\n        }\n    })\n}\n</code></pre>\n<p>点击聚合点的操作逻辑</p>\n<pre><code class="language-javascript">clickClusterCallback (cluster) {\n    <span class="hljs-comment">// 点击集合点时进行回调</span>\n    <span class="hljs-keyword">let</span> markers = cluster.getMarkers()\n    <span class="hljs-keyword">let</span> dataArray = markers.map(<span class="hljs-function">(<span class="hljs-params">{data}</span>) =&gt;</span> data)\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.map.getZoom() &gt;= <span class="hljs-number">16</span> || (<span class="hljs-keyword">this</span>.map.getZoom() &gt;= <span class="hljs-number">15</span> &amp;&amp; markers.length &lt;= <span class="hljs-number">3</span>)) {\n      <span class="hljs-comment">//如果 zoomlevel &gt;= 16, 不再放大, 直接预览房源 ||  如果 zoomlevel &gt;= 15, 少于3个点, 不再放大, 直接预览房源</span>\n      <span class="hljs-keyword">this</span>.selectedHouses = dataArray\n    } <span class="hljs-keyword">else</span> {\n      <span class="hljs-comment">// 放大 2 级</span>\n      <span class="hljs-keyword">this</span>.map.setCenter(cluster.getCenter())\n      <span class="hljs-keyword">this</span>.map.setZoom(<span class="hljs-keyword">this</span>.map.getZoom() + <span class="hljs-number">2</span>)\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n}\n</code></pre>\n<p>至此，地图就已创建完毕，可能还有一些细节的地方，比如地图 marker 缓存之类的就在实际使用的时候自行添加就可以了。</p>\n',description:"<html><head></head><body><h1>google maps &#x5FEB;&#x901F;&#x5165;&#x95E8;</h1>\n<blockquote>\n<p>&#x516C;&#x53F8;&#x505A;&#x7684;&#x662F;&#x5730;&#x4EA7;&#x4FE1;&#x606F;&#x67E5;&#x8BE2;&#xFF0C;&#x63A5;&#x5165; google maps &#x662F;&#x7528;&#x6765;&#x5728;&#x5730;&#x56FE;&#x9875;&#x4E2D;&#x663E;&#x793A;&#x6240;&#x6709;&#x5730;&#x56FE;&#x70B9;&#x4E0A;&#x5BF9;&#x5E94;&#x7684;&#x623F;&#x6E90;&#xFF0C;&#x8BA9;&#x7528;&#x6237;&#x65B9;&#x4FBF;&#x901A;&#x8FC7;&#x5730;&#x56FE;&#x67E5;&#x770B;&#x623F;&#x6E90;&#x4FE1;&#x606F;&#x3002;&#x5728;&#x5730;&#x56FE;&#x91CC;&#x5927;&#x6982;&#x4F1A;&#x4F7F;&#x7528;&#x5230;&#x5730;&#x56FE;&#x5E93;&#x4EE5;&#x53CA;&#x5730;&#x56FE; maker ,&#x5730;&#x56FE; markercluster &#x7B49;&#x529F;&#x80FD;.. &#x6709;&#x4E9B;&#x529F;&#x80FD;&#x6BD4;&#x8F83;&#x5934;&#x75BC;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x7A0D;&#x5FAE;&#x7F57;&#x5217;&#x4E00;&#x4E0B;&#xFF0C;&#x505A;&#x4E2A;&#x8BB0;&#x5F55;&#x3002;</p>\n</blockquote>\n<p><more></more></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</body></html>"}}}]);